!function(e){var t={};function n(r){if(t[r])return t[r].exports;var c=t[r]={i:r,l:!1,exports:{}};return e[r].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var c in e)n.d(r,c,function(t){return e[t]}.bind(null,c));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){},function(e,t,n){"use strict";n.r(t);n(0);var r=(e,t="metric")=>fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${e}&units=${t}&appid=a71cbacce1b2b9aa059f27a00094c380`).then(e=>e.json()).then(e=>e.cod&&400===e.cod?e.message:e);function c(e){return e>9?e:`0${e}`}var o=e=>{const t=new Date(e),n=c(t.getDate()),r=c(t.getMonth()+1),o=c(t.getHours()),i=c(t.getMinutes());return`${n}/${r}/${t.getFullYear()} ${o}:${i}`};var i=e=>{const t=document.querySelector("tbody");t.innerHTML="",e.forEach(e=>function(e){const n=o(e.dt_txt),r=`<img class="weather-img"\n    src="http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png" \n    alt="${e.weather[0].description}" title="${e.weather[0].description}">`,c=e.main.temp,i=e.main.temp_max,a=e.main.temp_min,u=e.main.pressure,l=e.main.humidity,d=e.main.feels_like,s=document.createElement("tr");s.innerHTML=`\n      <td>${n}</td>\n      <td class="weather">${r}</td>\n      <td class="temperature">${c}</td>\n      <td class="max-temp">${i}</td>\n      <td class="min-temp">${a}</td>\n      <td class="pressure">${u}</td>\n      <td class="humidity">${l}</td>\n      <td class="feels-like">${d}</td>`,t.appendChild(s)}(e))};var a=e=>{const t=e.target,n=document.querySelectorAll(`th.${t.id}, td.${t.id}`);t.checked?n.forEach(e=>{e.style.display="table-cell"}):n.forEach(e=>{e.style.display="none"})};var u=e=>{const t=document.querySelector(".error");if(0!==e.message)return t.innerText=e.message,void(t.style.opacity=1);t.style.opacity=0;const n=e;document.querySelector(".city_title").innerText=n.city.name,document.querySelector("#latitude").innerText=n.city.coord.lat,document.querySelector("#longitude").innerText=n.city.coord.lon,i(n.list),document.querySelector(".filters").querySelectorAll("input[type=checkbox]").forEach(e=>{e.removeAttribute("disabled"),e.addEventListener("change",a)})};var l=()=>{const e=document.querySelector(".toggleCheck_switch"),t=document.querySelector("#units");let n="";return n=t&&t.checked?"imperial":"metric",e.addEventListener("click",()=>{n=t&&!t.checked?"imperial":"metric";const e=document.querySelector("#city");r(e.value,n).then(u)}),n};var d=e=>{const t=e.target,n=document.querySelector(".error");0===t.value.length?(n.innerText="the field must not be empty",n.style.opacity=1):n.style.opacity=0};document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector("#city");e.addEventListener("input",d);const t=document.querySelector(".filters").querySelectorAll("input[type=checkbox]"),n=document.querySelector("tbody");t.forEach(e=>{0===n.children.length?e.setAttribute("disabled",!0):(e.removeAttribute("disabled"),e.addEventListener("change",a))}),document.querySelector(".form").addEventListener("submit",()=>{event.preventDefault();const t=l();r(e.value,t).then(u)}),l()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,