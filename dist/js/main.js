!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){},function(e,t,n){"use strict";n.r(t);n(0);var r=(e,t="metric")=>fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${e}&units=${t}&appid=8a480d014fa9dd3c95d8fbf4531869d3`).then(e=>e.json()).then(e=>e.cod&&400===e.cod?e.message:e);function i(e){return e>9?e:`0${e}`}var c=e=>{const t=new Date(e),n=i(t.getDate()),r=i(t.getMonth()+1),c=i(t.getHours()),s=i(t.getMinutes());return`${n}/${r}/${t.getFullYear()} ${c}:${s}`};var s=e=>`<img class="weather-img"\n  src="http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png" \n  alt="${e.weather[0].description}" title="${e.weather[0].description}">`;var o=e=>{const t=document.querySelector(".table-wrap");t.innerHTML="";const n=document.createElement("table");n.className="table",t.appendChild(n);const r=document.querySelectorAll(".filters input[type=checkbox]");let i={};r.forEach(e=>{i[e.id]=e.checked});const o=[];for(const e in i)if(i.hasOwnProperty(e)&&!0===i[e]){const t=e;o.push(t)}!function(e){const t=document.createElement("thead"),r=document.createElement("tr");r.innerHTML='\n    <th>Date/Time</th>\n    <th class="weather">Weather</th>',e.forEach(e=>{const t=document.createElement("th");switch(t.className=e,e){case"temperature":t.innerHTML="Temperature";break;case"max-temp":t.innerHTML="Max Temp.";break;case"min-temp":t.innerHTML="Min Temp.";break;case"pressure":t.innerHTML="Pressure";break;case"humidity":t.innerHTML="Humidity";break;case"feels-like":t.innerHTML="Feels like"}r.appendChild(t)}),t.appendChild(r),n.appendChild(t)}(o);const a=document.createElement("tbody");n.appendChild(a),a.innerHTML="",e.forEach(e=>function(e,t){const n=c(e.dt_txt),r=s(e),i=e.main.temp,o=e.main.temp_max,u=e.main.temp_min,l=e.main.pressure,d=e.main.humidity,m=e.main.feels_like,h=document.createElement("tr");h.innerHTML=`\n    <td>${n}</td>\n    <td class="weather">${r}</td>`,t.forEach(e=>{const t=document.createElement("td");switch(t.className=e,t.innerHTML=e,e){case"temperature":t.innerHTML=i;break;case"max-temp":t.innerHTML=o;break;case"min-temp":t.innerHTML=u;break;case"pressure":t.innerHTML=l;break;case"humidity":t.innerHTML=d;break;case"feels-like":t.innerHTML=m}h.appendChild(t)}),a.appendChild(h)}(e,o))};var a=e=>{document.querySelector(".city_title").innerText=e.city.name,document.querySelector("#latitude").innerText=e.city.coord.lat,document.querySelector("#longitude").innerText=e.city.coord.lon};var u=e=>{const t=document.querySelector(".error");if(0!==e.message)return t.innerText=e.message,void(t.style.opacity=1);t.style.opacity=0;const n=e;a(n),o(n.list)};var l=e=>{const t=e.target,n=document.querySelector(".error");0===t.value.length?(n.innerText="the field must not be empty",n.style.opacity=1):n.style.opacity=0};var d=class{constructor(){this.units="metric"}getUnits(){const e=document.querySelector("#units");return e&&e.checked?this.units="imperial":this.units="metric",console.log("this.units: ",this.units),this.units}setUnits(){const e=document.querySelector("#units");e&&!e.checked?this.units="imperial":this.units="metric";const t=document.querySelector("#city");return r(t.value,this.units).then(u),this.units}};var m=class{constructor(){this.filters={}}getFilters(){return document.querySelectorAll(".filters input[type=checkbox]").forEach(e=>{this.filters[e.id]=e.checked}),this.filters}setFilters(e){this.filters[e.id]=e.checked;const t=document.querySelectorAll(`th.${e.id}, td.${e.id}`);e.checked?t.forEach(e=>e.style.display="table-cell"):t.forEach(e=>e.style.display="none");const n=(new d).getUnits(),i=document.querySelector("#city");return r(i.value,n).then(u),this.filters}};document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector("#city");e.addEventListener("input",l);const t=new m;t.getFilters(),document.querySelectorAll(".filters input[type=checkbox]").forEach(e=>{e.addEventListener("change",e=>{t.setFilters(e.target)})});const n=new d;document.querySelector(".toggleCheck_switch").addEventListener("click",n.setUnits),document.querySelector(".form").addEventListener("submit",()=>{event.preventDefault();const t=n.getUnits();r(e.value,t).then(u)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,